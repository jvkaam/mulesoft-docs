apply plugin: 'org.ajoberstar.github-pages'

ext {
  assetsRepoBranchName = 'master'
  assetsRepoCommit = "origin/$assetsRepoBranchName"
  builderMaxHeapSize = '6g'
  publishMessage = project.hasProperty('buildTag') ? project.property('buildTag') : 'publish changes'
  publishRepoBranchName = 'master'
  publishRepoMirror = file('.gradle/build-output')
  publishRepoUri = 'https://github.com/mulesoft/mulesoft-docs-build-output'
  //publishRepoUri = 'git@github.com:mulesoft/mulesoft-docs-build-output.git'
  publishWorkingDir = '.gradle/build-output-work'
  siteUri = 'https://docs.mulesoft.com'
}

githubPages {
  repoUri = publishRepoMirror.path
  targetBranch = publishRepoBranchName
  commitMessage = publishMessage
  workingPath = publishWorkingDir
  pages { from siteDir }
}

prepareGhPages {
  mustRunAfter 'build'
  doFirst {
    // TODO verify this is a valid clone
    if (publishRepoMirror.directory) {
      exec {
        workingDir publishRepoMirror
        executable 'git'
        args 'fetch', '-q', 'origin'
      }
      exec {
        workingDir publishRepoMirror
        executable 'git'
        args 'reset', '-q', '--soft', 'FETCH_HEAD'
      }
    }
    else {
      exec {
        workingDir publishRepoMirror.parentFile
        executable 'git'
        args 'clone', '-q', '--bare', '--single-branch', publishRepoUri, publishRepoMirror.name
      }
    }
  }
}

task publish(group: 'Build', description: 'Builds site and commits changes to publish repository.') {
  dependsOn 'build', publishGhPages
}
