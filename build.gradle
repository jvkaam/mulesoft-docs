// TODO
// * add mode to run jetty in background
// * combine css (need to update template as well)
// * set outputs.dir for custom tasks
import com.palominolabs.gradle.task.git.clone.GitCloneTask
import org.eclipse.jgit.api.Git
import org.eclipse.jgit.lib.RepositoryBuilder

buildscript {
  configurations.create('builder')
  configurations.create('singlePageBuilder')

  repositories {
    if (project.hasProperty('useMavenLocal')) {
      mavenLocal()
    }
    jcenter()
    maven {
      url 'https://repository-master.mulesoft.org/nexus/content/repositories/public'
    }
  }

  dependencies {
    classpath 'com.eriwen:gradle-css-plugin:2.12.0'
    classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2'
    classpath 'org.ajoberstar:gradle-git:1.5.1-rc.3'

    builder 'com.mulesoft.documentation.builder:mule-docs-builder:1.0.0-M1'
    singlePageBuilder 'com.mulesoft.documentation.builder:mule-docs-single-page-builder:1.0.0-M1'
  }

  // enable upon upgrading to 1.0.0-RC1 (the non-shaded jar)
  //configurations.all {
  //  resolutionStrategy {
  //    // NOTE override JRuby version pulled in by AsciidoctorJ to work around hang in CodeRay
  //    force 'org.jruby:jruby:9.0.5.0'
  //  }
  //}
}

defaultTasks 'build'
group = 'com.mulesoft.documentation'

ext {
  dryRun = project.hasProperty('dryRun')
  assetsDir = '_assets'
  assetsRepoBranchName = 'staging'
  assetsRepoCommit = "origin/$assetsRepoBranchName"
  assetsRepoUri = 'https://github.com/mulesoft/mulesoft-docs-site-assets'
  builderMaxHeapSize = '2500m'
  builderJvmArgs = ['-Xverify:none', '-XX:+OptimizeStringConcat', '-XX:+UseFastAccessorMethods', '-Djava.net.preferIPv4Stack=true', '-Djava.awt.headless=true']
  docsRepoBranchName = 'master'
  docsRepoUri = 'https://github.com/mulesoft/mulesoft-docs'
  profile = project.hasProperty('profile') ? project.property('profile') : 'dev'
  profileBuildScript = "gradle/$profile-profile.gradle"
  siteDir = '_site'
  siteUri = 'http://localhost:8000'
  tempDir = '_tmp'
  templatesDir = '_templates'
}

if (file(profileBuildScript).exists()) apply from: profileBuildScript
apply plugin: 'css'

task cloneAssetsRepo(type: GitCloneTask) {
  dir = file(assetsDir)
  onlyIf { !dir.exists() }
  uri = assetsRepoUri
  treeish = assetsRepoCommit
  //trySshAgent = false
  doLast {
    // checkout staging branch properly
    // TODO should be fixed upstream (https://github.com/palominolabs/gradle-git-clone-task)
    def git = new Git(new RepositoryBuilder().readEnvironment().findGitDir(dir).build())
    def create = !git.branchList().call().find { it.name == "refs/heads/$assetsRepoBranchName" }
    git.checkout().setCreateBranch(create).setName(assetsRepoBranchName).setStartPoint(treeish).call()
  }
}

task setup(group: 'Build', description: 'Prepares the build.') {
  dependsOn cloneAssetsRepo
}

task clean(type: Delete, group: 'Build', description: 'Deletes assets and site directories.') {
  delete assetsDir, siteDir, tempDir
}

// TODO site builder should accept a custom templates directory
task copyTemplates(type: Copy) {
  // FIXME define variable useTemplatesFromAssets
  if (profile == 'prod') {
    enabled = false
  }
  else {
    dependsOn setup
  }
  from "$assetsDir/$templatesDir"
  into templatesDir
}

task buildHtml(type: JavaExec, group: 'Build', description: 'Builds HTML pages.') {
  dependsOn copyTemplates
  mustRunAfter setup
  classpath = buildscript.configurations.builder
  main = 'com.mulesoft.documentation.builder.Client'
  args = ['-s', '.', '-d', siteDir, '-ghr', docsRepoUri, '-ghb', docsRepoBranchName, '-url', siteUri]
  maxHeapSize = builderMaxHeapSize
  jvmArgs = builderJvmArgs
  //outputs.dir siteDir
  doLast {
    // FIXME define variable useTemplatesFromAssets
    if (profile != 'prod') {
      // NOTE undo changes to templates
      new Git(new RepositoryBuilder().readEnvironment().findGitDir(file('.')).build())
        .checkout().addPath(templatesDir).call()
    }
  }
}

// pass file to build using -Pfile=path/to/file.adoc
task buildHtmlSingle(type: JavaExec, group: 'Build', description: 'Builds a single HTML page.') {
  classpath = buildscript.configurations.singlePageBuilder
  main = 'com.mulesoft.documentation.builder.previewer.Client'
  args = ['-s', file(project.hasProperty('file') ? project.property('file') : 'index.adoc').absolutePath, '-d', tempDir]
}

task copyAssets(type: Copy) {
  dependsOn setup
  mustRunAfter buildHtml
  from(assetsDir) {
    exclude 'README.md'
    exclude '_*/**'
    //exclude 'css/*.less'
  }
  into siteDir
  //outputs.dir siteDir

  // preserve last modified times (futile since git clone doesn't preserve last modification times)
  //def fileCopyDetails = []
  //eachFile { fileCopyDetails << it }
  //doLast {
  //  fileCopyDetails.each { new File(destinationDir, it.path).setLastModified(it.lastModified) }
  //}
}

css {
  source {
    main {
      css {
        srcDir "$assetsDir/css"
        include '*.css'
        include '*.less'
      }
    }
  }
}

lesscss {
  dependsOn setup
  mustRunAfter copyAssets
  source = css.source.main.css.asFileTree
  dest = file("$siteDir/css/")
}

//def cssDir = "app/styles/"
//def cssSrc = ["file1.css","file2.css"]
//
//combineCss {
//    source = cssSrc.collect {cssDir+it}
//    dest = "$buildDir/all.css"
//}

task build(group: 'Build', description: 'Builds site.') {
  dependsOn setup, buildHtml, copyAssets //, lesscss
  mustRunAfter clean
}

task serve(type: JettyRun, group: 'Tools', description: 'Runs site in a local preview server.') {
  mustRunAfter build
  classpath = files()
  contextPath ''
  httpPort 8000
  reload 'automatic'
  webAppSourceDirectory file(siteDir)
}
